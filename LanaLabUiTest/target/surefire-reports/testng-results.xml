<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="6" passed="5" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2019-10-08T09:33:10Z" name="MultipleSuite" finished-at="2019-10-08T09:36:29Z" duration-ms="199061">
    <groups>
    </groups>
    <test started-at="2019-10-08T09:33:10Z" name="Test1" finished-at="2019-10-08T09:35:16Z" duration-ms="125982">
      <class name="login.Verify_Login_Scenario">
        <test-method is-config="true" signature="initialzeBrowser(java.lang.String)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:10Z" name="initialzeBrowser" finished-at="2019-10-08T09:33:26Z" duration-ms="15892" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialzeBrowser -->
        <test-method is-config="true" signature="nameBefore(java.lang.reflect.Method, java.lang.String)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:26Z" name="nameBefore" finished-at="2019-10-08T09:33:26Z" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void login.Verify_Login_Scenario.verify_if_user_get_the_error_message_with_invalid_username_and_password(java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nameBefore -->
        <test-method signature="verify_if_user_get_the_error_message_with_invalid_username_and_password(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:26Z" name="verify_if_user_get_the_error_message_with_invalid_username_and_password" data-provider="Testdata_Invalid_Email_Password" finished-at="2019-10-08T09:33:33Z" duration-ms="6815" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[punitjuyal902@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test@1234]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[The username or password you entered is invalid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verify_if_user_get_the_error_message_with_invalid_username_and_password -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:33Z" name="getResult" finished-at="2019-10-08T09:33:33Z" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verify_if_user_get_the_error_message_with_invalid_username_and_password status=SUCCESS method=Verify_Login_Scenario.verify_if_user_get_the_error_message_with_invalid_username_and_password(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="nameBefore(java.lang.reflect.Method, java.lang.String)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:33Z" name="nameBefore" finished-at="2019-10-08T09:33:33Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void login.Verify_Login_Scenario.verify_if_user_not_able_to_login_when_password_is_case_sensitve(java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nameBefore -->
        <test-method signature="verify_if_user_not_able_to_login_when_password_is_case_sensitve(java.lang.String, java.lang.String, java.lang.String)[pri:1, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:33Z" name="verify_if_user_not_able_to_login_when_password_is_case_sensitve" data-provider="Testdata_Valid_Email_And_Case_Sensative_Password" finished-at="2019-10-08T09:33:34Z" duration-ms="1489" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[punitjuyal902@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[TEST@123456]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[The username or password you entered is invalid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verify_if_user_not_able_to_login_when_password_is_case_sensitve -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:34Z" name="getResult" finished-at="2019-10-08T09:33:34Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verify_if_user_not_able_to_login_when_password_is_case_sensitve status=SUCCESS method=Verify_Login_Scenario.verify_if_user_not_able_to_login_when_password_is_case_sensitve(java.lang.String, java.lang.String, java.lang.String)[pri:1, instance:login.Verify_Login_Scenario@49c7b90e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="nameBefore(java.lang.reflect.Method, java.lang.String)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:34Z" name="nameBefore" finished-at="2019-10-08T09:33:34Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void login.Verify_Login_Scenario.verify_if_user_able_to_login_when_email_is_case_sensitive(java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nameBefore -->
        <test-method signature="verify_if_user_able_to_login_when_email_is_case_sensitive(java.lang.String, java.lang.String, java.lang.String)[pri:2, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:33:34Z" name="verify_if_user_able_to_login_when_email_is_case_sensitive" data-provider="Testdata_Valid_Passsword_And_Case_Sensative_Email" finished-at="2019-10-08T09:35:06Z" duration-ms="91967" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[PUNITJUYAL901@GMAIL.COM.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test@123456]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Choose a log]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//h2[contains(text(),'Choose a log')]"}
  (Session info: chrome=77.0.3865.90)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'Puneets-MBP-470a', ip: '192.168.43.72', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.14.2', java.version: '11.0.3'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 77.0.3865.90, chrome: {chromedriverVersion: 77.0.3865.40 (f484704e052e0..., userDataDir: /var/folders/jd/b9315b4d7gl...}, goog:chromeOptions: {debuggerAddress: localhost:60203}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: b5433e3f48552e372cc75523a9cfee84
*** Element info: {Using=xpath, value=//h2[contains(text(),'Choose a log')]}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//h2[contains(text(),'Choose a log')]"}
  (Session info: chrome=77.0.3865.90)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'Puneets-MBP-470a', ip: '192.168.43.72', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.14.2', java.version: '11.0.3'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 77.0.3865.90, chrome: {chromedriverVersion: 77.0.3865.40 (f484704e052e0..., userDataDir: /var/folders/jd/b9315b4d7gl...}, goog:chromeOptions: {debuggerAddress: localhost:60203}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: b5433e3f48552e372cc75523a9cfee84
*** Element info: {Using=xpath, value=//h2[contains(text(),'Choose a log')]}
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy15.getText(Unknown Source)
at com.test.lanalabs.pages.HomePage.getLandingPagePopUpText(HomePage.java:69)
at login.Verify_Login_Scenario.verify_if_user_able_to_login_when_email_is_case_sensitive(Verify_Login_Scenario.java:46)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verify_if_user_able_to_login_when_email_is_case_sensitive -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:35:06Z" name="getResult" finished-at="2019-10-08T09:35:06Z" duration-ms="325" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verify_if_user_able_to_login_when_email_is_case_sensitive status=FAILURE method=Verify_Login_Scenario.verify_if_user_able_to_login_when_email_is_case_sensitive(java.lang.String, java.lang.String, java.lang.String)[pri:2, instance:login.Verify_Login_Scenario@49c7b90e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="nameBefore(java.lang.reflect.Method, java.lang.String)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:35:06Z" name="nameBefore" finished-at="2019-10-08T09:35:06Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void login.Verify_Login_Scenario.verify_if_user_able_to_login_with_valid_credentials(java.lang.String,java.lang.String,java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nameBefore -->
        <test-method signature="verify_if_user_able_to_login_with_valid_credentials(java.lang.String, java.lang.String, java.lang.String)[pri:3, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:35:06Z" name="verify_if_user_able_to_login_with_valid_credentials" data-provider="Testdata_For_Valid_Email_Password" finished-at="2019-10-08T09:35:16Z" duration-ms="9260" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[punitjuyal901@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test@123456]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Choose a log]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verify_if_user_able_to_login_with_valid_credentials -->
        <test-method is-config="true" signature="TearDown()[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:35:16Z" name="TearDown" finished-at="2019-10-08T09:35:16Z" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TearDown -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:login.Verify_Login_Scenario@49c7b90e]" started-at="2019-10-08T09:35:16Z" name="getResult" finished-at="2019-10-08T09:35:16Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verify_if_user_able_to_login_with_valid_credentials status=SUCCESS method=Verify_Login_Scenario.verify_if_user_able_to_login_with_valid_credentials(java.lang.String, java.lang.String, java.lang.String)[pri:3, instance:login.Verify_Login_Scenario@49c7b90e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- login.Verify_Login_Scenario -->
    </test> <!-- Test1 -->
    <test started-at="2019-10-08T09:35:16Z" name="Test2" finished-at="2019-10-08T09:35:51Z" duration-ms="35561">
      <class name="filter.Verify_If_Selected_Filter_Is_Applied">
        <test-method is-config="true" signature="initialzeBrowser(java.lang.String)[pri:0, instance:filter.Verify_If_Selected_Filter_Is_Applied@6da21078]" started-at="2019-10-08T09:35:16Z" name="initialzeBrowser" finished-at="2019-10-08T09:35:30Z" duration-ms="14337" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialzeBrowser -->
        <test-method is-config="true" signature="nameBefore(java.lang.reflect.Method, java.lang.String)[pri:0, instance:filter.Verify_If_Selected_Filter_Is_Applied@6da21078]" started-at="2019-10-08T09:35:30Z" name="nameBefore" finished-at="2019-10-08T09:35:30Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void filter.Verify_If_Selected_Filter_Is_Applied.verify_if_country_filter_is_applied(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.InterruptedException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nameBefore -->
        <test-method signature="verify_if_country_filter_is_applied(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:filter.Verify_If_Selected_Filter_Is_Applied@6da21078]" started-at="2019-10-08T09:35:30Z" name="verify_if_country_filter_is_applied" data-provider="Testdata_For_Filter_Scenarios" finished-at="2019-10-08T09:35:51Z" duration-ms="21080" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[punitjuyal901@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test@123456]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Country]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Country filter]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verify_if_country_filter_is_applied -->
        <test-method is-config="true" signature="TearDown()[pri:0, instance:filter.Verify_If_Selected_Filter_Is_Applied@6da21078]" started-at="2019-10-08T09:35:51Z" name="TearDown" finished-at="2019-10-08T09:35:51Z" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TearDown -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:filter.Verify_If_Selected_Filter_Is_Applied@6da21078]" started-at="2019-10-08T09:35:51Z" name="getResult" finished-at="2019-10-08T09:35:51Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verify_if_country_filter_is_applied status=SUCCESS method=Verify_If_Selected_Filter_Is_Applied.verify_if_country_filter_is_applied(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:filter.Verify_If_Selected_Filter_Is_Applied@6da21078] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- filter.Verify_If_Selected_Filter_Is_Applied -->
    </test> <!-- Test2 -->
    <test started-at="2019-10-08T09:35:51Z" name="Test3" finished-at="2019-10-08T09:36:29Z" duration-ms="37413">
      <class name="filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart@169e6180]" started-at="2019-10-08T09:33:09Z" name="beforeSuite" finished-at="2019-10-08T09:33:10Z" duration-ms="433" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="initialzeBrowser(java.lang.String)[pri:0, instance:filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart@169e6180]" started-at="2019-10-08T09:35:51Z" name="initialzeBrowser" finished-at="2019-10-08T09:36:06Z" duration-ms="15048" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialzeBrowser -->
        <test-method signature="verify_if_country_filter_is_applied(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart@169e6180]" started-at="2019-10-08T09:36:06Z" name="verify_if_country_filter_is_applied" data-provider="Testdata_For_Filter_Scenarios" finished-at="2019-10-08T09:36:29Z" duration-ms="22193" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[punitjuyal901@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test@123456]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Country]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Country filter]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verify_if_country_filter_is_applied -->
        <test-method is-config="true" signature="nameBefore(java.lang.reflect.Method, java.lang.String)[pri:0, instance:filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart@169e6180]" started-at="2019-10-08T09:36:06Z" name="nameBefore" finished-at="2019-10-08T09:36:06Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart.verify_if_country_filter_is_applied(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.InterruptedException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nameBefore -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart@169e6180]" started-at="2019-10-08T09:36:29Z" name="getResult" finished-at="2019-10-08T09:36:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verify_if_country_filter_is_applied status=SUCCESS method=Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart.verify_if_country_filter_is_applied(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart@169e6180] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="TearDown()[pri:0, instance:filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart@169e6180]" started-at="2019-10-08T09:36:29Z" name="TearDown" finished-at="2019-10-08T09:36:29Z" duration-ms="169" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TearDown -->
        <test-method is-config="true" signature="closeExtentReport()[pri:0, instance:filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart@169e6180]" started-at="2019-10-08T09:36:29Z" name="closeExtentReport" finished-at="2019-10-08T09:36:29Z" duration-ms="373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeExtentReport -->
      </class> <!-- filter.Verify_if_user_able_to_filter_specific_attribute_value_from_pie_chart -->
    </test> <!-- Test3 -->
  </suite> <!-- MultipleSuite -->
</testng-results>
